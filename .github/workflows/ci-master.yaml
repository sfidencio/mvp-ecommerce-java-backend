name: CD tag, release, sonar, docker image and deploy

   on:
     push:
       branches:
         - 'master'

   jobs:
     build-and-test:
       runs-on: ubuntu-latest
       steps:
         - name: Checkout code
           uses: actions/checkout@v4
         - name: Set up JDK 17
           uses: actions/setup-java@v4
           with:
             java-version: '17'
             distribution: 'temurin'
         - name: Package Maven Project
           run: mvn package -DskipTests=true

   #  sonarcloud-check:
   #    runs-on: ubuntu-latest
   #    needs: [build-and-test]
   #    steps:
   #      - name: Checkout code
   #        uses: actions/checkout@v4
   #      - name: SonarCloud Scan
   #        uses: SonarSource/sonarcloud-github-action@v1
   #        with:
   #          projectKey: ${{ secrets.SONAR_PROJECT_KEY }}
   #          organization: ${{ secrets.SONAR_ORGANIZATION }}
   #          token: ${{ secrets.SONAR_TOKEN }}

     create-tag-release:
       runs-on: ubuntu-latest
       steps:
         - name: Checkout code
           uses: actions/checkout@v4

         - name: Set up JDK
           uses: actions/setup-java@v4
           with:
             java-version: '17'
             distribution: 'temurin'

         - name: Get Maven Version
           id: get_version
           run: |
             VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/-SNAPSHOT//')
             if [[ -z "$VERSION" ]]; then
               echo "::error::Failed to extract Maven version from pom.xml"
               exit 1
             fi
             echo "::set-output name=version::$VERSION"
           shell: bash

         - name: Create Release
           uses: actions/create-release@v1
           env:
             GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
             VERSION: ${{ steps.get_version.outputs.version }}
           with:
             tag_name: v${{ steps.get_version.outputs.version }}
             release_name: Release v${{ steps.get_version.outputs.version }}
             body: |
               Release for version ${{ steps.get_version.outputs.version }}
             draft: false
             prerelease: false
           id: create_release_action  # Add an ID for checking the outcome
           continue-on-error: false  # Fail the job if release creation fails

         - name: Check Release Creation
           if: steps.create_release_action.outcome != 'success'
           run: |
             echo "::error::Failed to create release. See the previous step for details."
             exit 1

   #  build-and-push-docker:
   #    runs-on: ubuntu-latest
   #    needs: [create-tag]
   #    steps:
   #      - name: Checkout code
   #        uses: actions/checkout@v4
   #      - name: Log in to DockerHub
   #        uses: docker/login-action@v2
   #        with:
   #          username: ${{ secrets.DOCKER_USERNAME }}
   #          password: ${{ secrets.DOCKER_PASSWORD }}
   #      - name: Build and Push Docker Image
   #        run: |
   #          IMAGE_NAME=sfidencio/mvp-ecommerce-java-backend:${{ steps.create_tag.outputs.TAG_NAME }}
   #          docker build -t $IMAGE_NAME .
   #          docker push $IMAGE_NAME