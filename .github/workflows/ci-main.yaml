name: CD tag, release, sonar, docker image and deploy

on:
  push:
    branches:
      - 'main'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Package Maven Project
        run: mvn package -DskipTests=true

#  sonarcloud-check:
#    runs-on: ubuntu-latest
#    needs: [build-and-test]
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#      - name: SonarCloud Scan
#        uses: SonarSource/sonarcloud-github-action@v1
#        with:
#          projectKey: ${{ secrets.SONAR_PROJECT_KEY }}
#          organization: ${{ secrets.SONAR_ORGANIZATION }}
#          token: ${{ secrets.SONAR_TOKEN }}

  create-tag:
    runs-on: ubuntu-latest
#    needs: [sonarcloud-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Get Project Version
        id: get_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Create Tag
        id: create_tag
        run: |
          TAG_NAME=v${{ env.VERSION }}
          git tag $TAG_NAME
          git push origin $TAG_NAME
      - name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.create_tag.outputs.TAG_NAME }}
          release_name: Release ${{ steps.create_tag.outputs.TAG_NAME }}
          body: "Release for version ${{ steps.create_tag.outputs.TAG_NAME }}"
          draft: false
          prerelease: false
          token: ${{ secrets.PAT_TOKEN }}

#  build-and-push-docker:
#    runs-on: ubuntu-latest
#    needs: [create-tag]
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#      - name: Log in to DockerHub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#      - name: Build and Push Docker Image
#        run: |
#          IMAGE_NAME=sfidencio/mvp-ecommerce-java-backend:${{ steps.create_tag.outputs.TAG_NAME }}
#          docker build -t $IMAGE_NAME .
#          docker push $IMAGE_NAME